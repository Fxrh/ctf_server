#!/usr/bin/env python3
"""
DBUS daemon to manage users for the CTF server
"""

from gi.repository import GObject

import dbus
import dbus.service
import dbus.mainloop.glib

import subprocess
import os

class CTFServer(dbus.service.Object):
    def __init__(self, bus, object_path):
        dbus.service.Object.__init__(self, bus, object_path)
        
    @dbus.service.method(dbus_interface='de.fxrh.ctfserver',
                         in_signature='', out_signature='s')
    def hello(self):
        return "Hello, World!"
    
    @dbus.service.method(dbus_interface='de.fxrh.ctfserver',
                         in_signature='i', out_signature='')
    def addServiceAccount( self, service_id ):
        try:
            service_id = int(service_id)
        except ValueError:
            raise Exception("Only integers allowed as service ids")
        subprocess.check_call(["/usr/sbin/useradd", "-mUK", "UMASK=077", "-s", "/bin/bash", "ctf-"+str(service_id)])
    
    @dbus.service.method(dbus_interface='de.fxrh.ctfserver',
                         in_signature='is', out_signature='')
    def setServiceKeys( self, service_id, keys ):
        try:
            service_id = int(service_id)
        except ValueError:
            raise Exception("Only integers allowed as service ids")
        home_dir = "home/ctf-"+str(service_id)
        if not os.path.exists(home_dir):
            raise Exception("Home directory for challenge {0} does not exist".format(service_id))
        os.makedirs("/home/ctf-"+str(service_id)+"/.ssh", exist_ok=True)
        with open("/home/ctf-"+str(service_id)+"/.ssh/authorized_keys", "w") as f:
            f.write(keys)
    

def main():
    dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

    system_bus = dbus.SystemBus()
    name = dbus.service.BusName("de.fxrh.ctfserver", system_bus)
    object = CTFServer(system_bus, '/CTFServer')

    mainloop = GObject.MainLoop()
    mainloop.run()
    
if __name__ == '__main__':
    main()

